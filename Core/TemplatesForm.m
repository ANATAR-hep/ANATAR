(* ::Package:: *)

(********************************************)
(*          Write projectors file           *)
(********************************************)

MathematicaToFormSubs = {
  "Sqrt(" ~~ Shortest[x__] ~~ ")" :> "sqrt_(" ~~ x ~~ ")",
  "Sqrt[" ~~ Shortest[x__] ~~ "]" :> "sqrt_(" ~~ x ~~ ")",
  "Dot(" ~~ Shortest[x__] ~~ "," ~~ Shortest[y__] ~~ ")" :>  x ~~ "." ~~ y,
  "Dot[" ~~ Shortest[x__] ~~ "," ~~ Shortest[y__] ~~ "]" :>  x ~~ "." ~~ y,
   "Metric(" :> "d_(",
   "Metric[" :> "d_(",
   "LeviCivita(" :> "Levieps(",
   "LeviCivita[" :> "Levieps(",
   "["->"(",
   "]"->")",
   " . "->"."
  };

(**********************************)
(*   Write definitions for FORM   *)
(**********************************)


WriteDefinitions[out0_,nLines0_,nDiagram0_,TraceDimension0_,FieldsInFR_,antiFieldsInFR_,allFieldsInFR_]:=Block[{outh=out0,nLines=nLines0,outfile,partTag,AN$QGrafFunctions,AN$QGrafSymbols,Fermions,Bosons,TraceDimension,nDiagram=nDiagram0,wsp,comStr,lineLength},

  AN$QGrafFunctions={Xi,ff,pol,vrtx,pro,PolV,SpinorU,SpinorV,SpinorUbar,SpinorVbar,SpinorUC,SpinorVC,SpinorUbarC,SpinorVbarC,Den,PolVC};
  AN$QGrafSymbols={x, y,n,n2,im};

  partTag=Range[1,nLines-1];

  (* Space-Time dimension in FORM is kept as D *)
  TraceDimension = TraceDimension0/.{$DimensionST->D};

  outfile=outh<>"/Definitions.h";

   
    info=(ToString[#1]<>" : "<>If[Head[#2]===List,StringDrop[StringJoin[(#<>", "&)/@#2],-2],#2]&)@@@M$Information;
  wsp="                                                                                                                             ";     
  lineLength=50;
  comStr="*************************************************************************************";
  OpenWrite[outfile];
    WriteString[outfile,StringTake[comStr,lineLength]<>"\n" ];
    WriteString[outfile,StringTake["*    File automatically generated by ANATAR    "<>wsp,lineLength]<>"\n" ];
    WriteString[outfile,StringTake[comStr,lineLength]<>"\n\n\n" ];
    WriteString[outfile,"*****      This file contains the definitions of the elements of the Feynman Rules      *****\n"];
    WriteString[outfile,"\n"];
    If[IntegerQ[TraceDimension]== False, WriteString[outfile,"Symbols "<>ToString[TraceDimension]<>";\n"] ];
    WriteString[outfile,"dimension "<>ToString[TraceDimension]<>" ;\n"];
    (WriteString[outfile,"Cf   "<>((StringDelete[#,"}"] &)@(StringDelete[#,"{"] &)@(ToString[InputForm[#] ]))<>";\n"]&)@AN$QGrafFunctions;
    (WriteString[outfile,"s   "<>((StringDelete[#,"}"] &)@(StringDelete[#,"{"] &)@(ToString[InputForm[#] ]))<>";\n"]&)@AN$QGrafSymbols;
    (WriteString[outfile,"s   "<>((StringDelete[#,"}"] &)@(StringDelete[#,"{"] &)@(ToString[InputForm[#] ]))<>";\n"]&)@AN$Parameters;
    WriteString[outfile,"s   GC1,...,GC"<>ToString[AN$NoCouplings]<>",nnp1,...,nnp17,five;\n"];
    WriteString[outfile,"s   a1,...,a"<>ToString[nDiagram]<>",mass,CA,CF,TF,Nc,Flag;\n"];
    WriteString[outfile,"i   mu1,...,mu"<>ToString[nLines]<>",nu1,...,nu"<>ToString[nLines]<>",la1,...,la"<>ToString[nLines]<>",si1,...,si"<>ToString[nLines]<>",One,alpha,alpha2,beta2,Upper,Lower;\n"];
    (WriteString[outfile,"f   "<>((StringDelete[#,"}"] &)@(StringDelete[#,"{"] &)@(ToString[InputForm[#] ]))<>";\n"]&)@FieldsInFR;
    (WriteString[outfile,"f   "<>((StringDelete[#,"}"] &)@(StringDelete[#,"{"] &)@(ToString[InputForm[#] ]))<>";\n"]&)@antiFieldsInFR;
    WriteString[outfile,"v   nn,p1,...,p"<>ToString[nLines]<>",q1,...,q"<>ToString[nLines]<>",k1,...,k"<>ToString[nLines]<>",pin; \n"];
    WriteString[outfile,"AutoDeclare Index   Lor,iLor,Spin,iSpin; \n"];
    If[AN$StructureConstantsList=!={},
      (WriteString[outfile,"t   "<>((StringDelete[#,"}"] &)@(StringDelete[#,"{"] &)@(ToString[InputForm[#] ]))<>"(antisymmetric);\n"]&)@AN$StructureConstantsList;]
    If[AN$GeneratorsList=!={},
      (WriteString[outfile,"t   "<>((StringDelete[#,"}"] &)@(StringDelete[#,"{"] &)@(ToString[InputForm[#] ]))<>";"]&)@AN$GeneratorsList];
    WriteString[outfile,"\n"];
    WriteString[outfile,"cf   GammaM, Levieps(antisymmetric),TM,fabc,Dot,Delta,Delta1;\n"];
    WriteString[outfile,"AutoDeclare function   GammaMF,LeviepsMF;\n"];
    (WriteString[outfile,"s   "<>((StringDelete[#,"}"] &)@(StringDelete[#,"{"] &)@(ToString[InputForm[#] ]))<>";"]&)@(AN$Masses[[;;,2]]//DeleteDuplicates);
    WriteString[outfile,"\n"];
    WriteString[outfile,"f   RXi,hide,FL,FG;\n"];
    WriteString[outfile, "\n"];
    WriteString[outfile,"\n"];
    (WriteString[outfile,"set   Field:"<>((StringDelete[#,"}"] &)@(StringDelete[#,"{"] &)@(ToString[InputForm[#] ]))<>";"]&)@allFieldsInFR;
    WriteString[outfile,"\n"];
    (WriteString[outfile,"set   Fermion:"<>((StringDelete[#,"}"] &)@(StringDelete[#,"{"] &)@(ToString[InputForm[#] ]))<>";"]&)@AN$Fermions;
    WriteString[outfile,"\n"];
    (WriteString[outfile,"set   Boson:"<>((StringDelete[#,"}"] &)@(StringDelete[#,"{"] &)@(ToString[InputForm[#] ]))<>";"]&)@AN$Bosons;
    WriteString[outfile,"\n"];
    (WriteString[outfile,"set   xFermion:"<>((StringDelete[#,"}"] &)@(StringDelete[#,"{"] &)@(ToString[InputForm[#] ]))<>";"]&)@AN$xFermions;
    WriteString[outfile,"\n"];
    (WriteString[outfile,"set   yFermion:"<>((StringDelete[#,"}"] &)@(StringDelete[#,"{"] &)@(ToString[InputForm[#] ]))<>";"]&)@AN$yFermions;
    WriteString[outfile,"\n"];
    Do[
      WriteString[outfile,"set   "<>ToString[AN$FieldsClassified[[jj,1,1]]]<>"ed:"<>((StringDelete[#,"}"] &)@(StringDelete[#,"{"] &)@ToString[InputForm@AN$FieldsClassified[[jj,;;,2]]])<>";\n"]
      ,{jj,1,Length[AN$IndicesInFR]}];
    WriteString[outfile,"\n"];
    WriteString[outfile,"set   initialMomenta:"<>((StringDelete[#,"}"] &)@(StringDelete[#,"{"] &)@ToString[AN$InitialMomenta])<>";\n"];
    WriteString[outfile,"set   finalMomenta:"<>((StringDelete[#,"}"] &)@(StringDelete[#,"{"] &)@ToString[AN$FinalMomenta])<>";\n"];
    WriteString[outfile,"set   allMomenta:"<>((StringDelete[#,"}"] &)@(StringDelete[#,"{"] &)@ToString[Join[AN$InitialMomenta,AN$FinalMomenta] ])<>";\n"];
    WriteString[outfile,"\n"];
    WriteString[outfile,"set   ExtLor:Lor1,...,Lor"<>ToString[nLines]<>";"];
    WriteString[outfile,"\n"];
    WriteString[outfile,"set   IntLor:iLor1,...,iLor"<>ToString[nLines]<>";\n"];
    WriteString[outfile,"set   allLor:Lor1,...,Lor"<>ToString[nLines]<>",iLor1,...,iLor"<>ToString[nLines]<>";\n"];
    WriteString[outfile,"set   allmom:p1,...,p"<>ToString[nLines]<>",k1,...,k"<>ToString[nLines]<>";\n"];
    WriteString[outfile,"set   ExtColour:Colour1,...,Colour"<>ToString[nLines]<>";\n"];
    WriteString[outfile,"set   Spin:Spin1,...,Spin"<>ToString[nLines]<>";"];  
    WriteString[outfile,"\n"];  
    WriteString[outfile,"set   IntSpin:iSpin1,...,iSpin"<>ToString[nLines]<>";\n"];
    WriteString[outfile,"set   partTagInt:1,...,"<>ToString[nLines]<>"; "];
    WriteString[outfile,"\n"];
    WriteString[outfile,"set   partTagIntPOne:2,...,"<>ToString[nLines]<>"; "];
    WriteString[outfile,"\n"];
    WriteString[outfile,"set   partTagExt:"];
    (WriteString[outfile,(ToString[InputForm[#] ])<>","]&)/@(-partTag);
    WriteString[outfile,"-"<>ToString[nLines]<>";\n"];
    WriteString[outfile,"set   partTag:"];
    (WriteString[outfile,(ToString[InputForm[#] ])<>","]&)/@(-partTag);
    WriteString[outfile,"-"<>ToString[nLines]<>",1,...,"<>ToString[nLines]<>";\n"];
    WriteString[outfile,"\n"];
    WriteString[outfile,"\n"];
    WriteString[outfile,".global"];
    WriteString[outfile,"\n"];
  Close[outfile];
]




(*************************************)
(*     Write Amplitude FORM file     *)
(*************************************)



WriteMasterFO[out0_,nDiagrams_,nLoops0_,QGDiagrams0_,model_String,processName_String,Dim_,SimplifiedAmplitud_,TrimAmp_,SelectAmplitudes_,SelectCouplingsOrder_,simpRules1_,gauges_List]:=Block[{nD=nDiagrams,outh=out0,outfile,QGDiagrams=QGDiagrams0,nLoops=nLoops0,SaveDir,couplings,couplingsPwr,couplingsStr,filteredRules,simpRules,wsp,lineLength,comStr,stringMasses},

outfile=outh<>"/Amp_"<>ToString[nLoops]<>".frm";
SaveDir = outPath<>"/Amp_"<>ToString[nLoops];

simpRules = simpRules1/.{S->SS,T->TT,U->UU};

couplings=SelectCouplingsOrder[[;;,1]];
If[Length[couplings]>0,
  couplingsStr=Sequence@@couplings;
  couplingsStr=ToString[couplingsStr];
];
couplingsPwr=SelectCouplingsOrder[[;;,2]];

stringMasses = ToString[DeleteDuplicates[AN$Masses[[;;,2]] ] ];
stringMasses = StringDelete[ stringMasses, {"{", "}"}];

wsp="                                                                                                                             ";     
lineLength=50;
comStr="*************************************************************************************";
OpenWrite[outfile];
  WriteString[outfile,StringTake[comStr,lineLength]<>"\n" ];
  WriteString[outfile,StringTake["*    File automatically generated by ANATAR    "<>wsp,lineLength]<>"\n" ];
  WriteString[outfile,StringTake[comStr,lineLength]<>"\n\n\n" ];
  WriteString[outfile,"*****      This is the master FORM file     *****\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"***** Amplitude for the process "<>ToString[InputForm[AN$InitialState] ]<>" > "<>ToString[InputForm[AN$FinalState] ]<>" ******\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"#-\n"];
  WriteString[outfile,"off statistics,finalstats,allwarnings;\n"];
  WriteString[outfile,"nwrite statistics;\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"#define RANK \"14\"\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Core/color.h  #Declarations\n"];
  WriteString[outfile,"#include "<>outPath<>"/Definitions.h\n"];
  WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Core/color.h  #color \n"];
  WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Core/color.h  #SORT\n"];
  WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Core/color.h  #adjoint\n"];
  If[Dim===4,
  WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Core/DiracTraces4d.frm\n"],
  WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Core/DiracTraces.frm\n"]
  ];
  WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Models/"<>model<>"/Vertices.frm\n"];
  WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Models/"<>model<>"/Polarizations.frm\n"];
  WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Models/"<>model<>"/Propagators.frm\n"];
  If[SelectCouplingsOrder=!="All",
    WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Models/"<>model<>"/Couplings.frm\n"];
    ];
  WriteString[outfile,"\n"];
  WriteString[outfile,"\n"];
  If[ContainsExactly[Head/@SelectAmplitudes,{Span}],
     WriteString[outfile,"#do i = "<>StringDelete[StringReplace[StringReplace[ToString[SelectAmplitudes, InputForm], ";;" -> ","]," " -> ""],{"{", "}"}]"\n"],
  WriteString[outfile,"#do i = "<>StringReplace[StringReplace[ToString[SelectAmplitudes, InputForm], ";;" -> ",...,"]," " -> ""]"\n"]];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  If[SelectCouplingsOrder =!="All",
    WriteString[outfile,"g tempV"<>ToString[nLoops]<>"H`i' = a`i';\n"],
    WriteString[outfile,"g V"<>ToString[nLoops]<>"H`i' = a`i';\n"];
    ];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"#include "<>QGDiagrams<>";\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  If[TrimAmp===True,
    WriteString[outfile,"id   pol(ff?Boson(?a, p1?)) = 1;\n"];
    WriteString[outfile,".sort\n\n"];
  ];
  WriteString[outfile,"#call FeynmanRules;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"#call Polarizations;\n"];
  WriteString[outfile,".sort\n\n"];
  WriteString[outfile,"#call Propagators;\n"];
  WriteString[outfile,".sort\n\n"];
  If[AN$GaugeGroups=!={{U1Y, Abelian}},
    Do[
      Which[
        gauges[[ii,2]]==="Feynman",
        WriteString[outfile,"#call Propagators"<>gauges[[ii,1]]<>"FeynmanGauge;\n"];
        WriteString[outfile,".sort\n\n"],
        gauges[[ii,2]]==="RXi",
        WriteString[outfile,"#call Propagators"<>gauges[[ii,1]]<>"RXiGauge;\n"];
        WriteString[outfile,".sort\n\n"],
        gauges[[ii,2]]==="Unitary",
        WriteString[outfile,"#call Propagators"<>gauges[[ii,1]]<>"UnitaryGauge;\n"];
        WriteString[outfile,".sort\n\n"]
      ]
    ,{ii,1,Length[gauges]}]
  ];
  If[SelectCouplingsOrder=!="All",
    WriteString[outfile,"#call Couplings;\n"];
    WriteString[outfile,".sort\n\n"];
    WriteString[outfile,"bracket "<>couplingsStr<>";\n" ];
    WriteString[outfile,".sort\n\n"];
    WriteString[outfile,"g V"<>ToString[nLoops]<>"H`i' = tempV"<>ToString[nLoops]<>"H`i'["<>ToString[couplings[[1]] ]<>"^"<>ToString[couplingsPwr[[1]] ]<>"];\n"];
    WriteString[outfile,".sort\n\n"];
  ];
  If[simpRules=!="None",
      WriteString[outfile,"id "<>StringReplace[ToString@InputForm[#[[1]] ],MathematicaToFormSubs]<>" = "<>StringReplace[ToString@InputForm[#[[2]] ],MathematicaToFormSubs]<>";\n"]& /@simpRules;
      noSpinorRules = Select[simpRules, Not@StringContainsQ[ StringReplace[ToString@InputForm[#[[1]]], MathematicaToFormSubs], "SpinorUC" | "SpinorVC" | "SpinorUbarC" | "SpinorVbarC" |
      "PolVC" | "SpinorU" | "SpinorV" | "SpinorUbar" | "SpinorVbar" | "PolV" ] & ];
      If[Length[noSpinorRules]>0,
      WriteString[outfile,"argument;\n"];
      WriteString[outfile,"id "<>StringReplace[ToString@InputForm[#[[1]] ],MathematicaToFormSubs]<>" = "<>StringReplace[ToString@InputForm[#[[2]] ],MathematicaToFormSubs]<>";\n"]&/@noSpinorRules;
      WriteString[outfile,"endargument;\n"];];
      WriteString[outfile,".sort\n\n"];
    ];
  WriteString[outfile,"#call Gamma5Subs;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"#call ColourSubs;\n"];
  WriteString[outfile,".sort\n\n"];
  If[SimplifiedAmplitud===False,
    WriteString[outfile,"format mathematica;\n"];
    WriteString[outfile,".sort\n\n"];
    WriteString[outfile,"bracket SpinorU, SpinorV, SpinorUbar, SpinorVbar, PolV, Den,GammaM;\n"];
    WriteString[outfile,"print+s V"<>ToString[nLoops]<>"H`i';\n"];
    WriteString[outfile,".sort\n\n"];
    WriteString[outfile,"bracket SpinorU, SpinorV, SpinorUbar, SpinorVbar, PolV, Den, f, fabc,GammaM;\n"];
    WriteString[outfile,".sort\n"];
    WriteString[outfile,"#write<Amp_"<>ToString[nLoops]<>".m> \"AN$Amplitude['i'] = ( %E )\",  V"<>ToString[nLoops]<>"H`i';\n"];
    WriteString[outfile,".sort\n\n"];
    ];
  WriteString[outfile,"repeat id p1?.p2? = Dot(p1,p2);\n"];
  WriteString[outfile,".sort;\n"];
  WriteString[outfile,"ab T,f,Den,GC1,...,GC"<>ToString[AN$NoCouplings]<>","<>stringMasses<>",Dot,NR,NA,cR,cA,I2R,i_,im;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"Collect hide;\n"];
  WriteString[outfile,"ArgToExtraSymbol hide;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"#call DiracTraces;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"id hide(y?) = y;\n"];
  WriteString[outfile,"FromPolynomial;\n"];
  WriteString[outfile,"repeat id Dot(p1?,p2?) = p1.p2;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"repeat id im = i_;\n"];
  WriteString[outfile,"id PolV(p1?,p1?,0,Gluon1?) = 0;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  If[SimplifiedAmplitud===True,
    WriteString[outfile,"bracket SpinorU, SpinorV, SpinorUbar, SpinorVbar, PolV, Den,GammaM;\n"];
    WriteString[outfile,"print+s V"<>ToString[nLoops]<>"H`i';\n"];
    WriteString[outfile,".sort\n\n"];
    WriteString[outfile,"format mathematica;\n"];
    WriteString[outfile,".sort\n\n"];
    WriteString[outfile,"bracket SpinorU, SpinorV, SpinorUbar, SpinorVbar, PolV, Den, f, fabc,GammaM;\n"];
    WriteString[outfile,".sort\n"];
    WriteString[outfile,"#write<Amp_"<>ToString[nLoops]<>".m> \"AN$Amplitude['i'] = ( %E )\",  V"<>ToString[nLoops]<>"H`i';\n"];
    WriteString[outfile,".sort\n\n"];
    ];
  WriteString[outfile,"\n"];
  If[DirectoryQ[SaveDir],DeleteDirectory[SaveDir,DeleteContents->True] ];
  CreateDirectory[SaveDir];
  WriteString[outfile,".store \n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"Save Amp_"<>ToString[nLoops]<>"/V"<>ToString[nLoops]<>"H`i'.sav V"<>ToString[nLoops]<>"H`i';\n"];
  WriteString[outfile,If[Not[AN$GZip],"*",""] <> "#system gzip <Amp_"<>ToString[nLoops]<>"/V"<>ToString[nLoops]<>"H`i'.sav> Amp_"<>ToString[nLoops]<>"/V"<>ToString[nLoops]<>"H`i'.sav.gz\n"];
  WriteString[outfile,If[Not[AN$GZip],"*",""] <> "#system rm Amp_"<>ToString[nLoops]<>"/V"<>ToString[nLoops]<>"H`i'.sav\n"];
  WriteString[outfile,"Delete Storage;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"Drop;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"#enddo\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,".end\n"];
Close[outfile];
]  



(***********************************************)
(*     Write Amplitude Conjugate FORM file     *)
(***********************************************)


WriteMasterCFO[out0_,nDiagrams_,nLoops0_,QGDiagrams0_,model_String,processName_String,Dim_,SimplifiedAmplitud_,TrimAmp_,SelectAmplitudes_,SelectCouplingsOrder_,simpRules1_,gauges_List]:=Block[{nD=nDiagrams,outh=out0,outfile,QGDiagrams=QGDiagrams0,nLoops=nLoops0,SaveDir,couplings,couplingsPwr,couplingsStr,minAmplitude,maxAmplitude,wsp,lineLength,comStr,stringMasses},

outfile=outh<>"/AmpC_"<>ToString[nLoops]<>".frm";
SaveDir = outPath<>"/AmpC_"<>ToString[nLoops];

simpRules = simpRules1/.{S->SS,T->TT,U->UU};

couplings=SelectCouplingsOrder[[;;,1]];
If[Length[couplings]>0,
  couplingsStr=Sequence@@couplings;
  couplingsStr=ToString[couplingsStr];
];
couplingsPwr=SelectCouplingsOrder[[;;,2]];

stringMasses = ToString[DeleteDuplicates[AN$Masses[[;;,2]] ] ];
stringMasses = StringDelete[ stringMasses, {"{", "}"}];

wsp="                                                                                                                             ";     
lineLength=50;
comStr="*************************************************************************************";
OpenWrite[outfile];
  WriteString[outfile,StringTake[comStr,lineLength]<>"\n" ];
  WriteString[outfile,StringTake["*    File automatically generated by ANATAR    "<>wsp,lineLength]<>"\n" ];
  WriteString[outfile,StringTake[comStr,lineLength]<>"\n\n\n" ];
  WriteString[outfile,"*****      This is the master Conjugate FORM file for      *****\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"***** AmplitudeC for the process "<>ToString[InputForm[AN$InitialState] ]<>" > "<>ToString[InputForm[AN$FinalState] ]<>" ******\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"#-\n"];
  WriteString[outfile,"off statistics,finalstats,allwarnings;\n"];
  WriteString[outfile,"nwrite statistics;\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"#define RANK \"14\"\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Core/color.h  #Declarations\n"];
  WriteString[outfile,"#include "<>outPath<>"/Definitions.h\n"];
  WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Core/color.h  #color \n"];
  WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Core/color.h  #SORT\n"];
  WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Core/color.h  #adjoint\n"];
  If[Dim===4,
  WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Core/DiracTraces4d.frm\n"],
  WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Core/DiracTraces.frm\n"]
  ];
  WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Models/"<>model<>"/Vertices.frm\n"];
  WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Models/"<>model<>"/Polarizations.frm\n"];
  WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Models/"<>model<>"/Propagators.frm\n"];
  If[SelectCouplingsOrder=!="All",
    WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Models/"<>model<>"/Couplings.frm\n"];
    ];
  WriteString[outfile,"\n"];
  WriteString[outfile,"\n"];
  If[ContainsExactly[Head/@SelectAmplitudes,{Span}],
     WriteString[outfile,"#do i = "<>StringDelete[StringReplace[StringReplace[ToString[SelectAmplitudes, InputForm], ";;" -> ","]," " -> ""],{"{", "}"}]"\n"],
  WriteString[outfile,"#do i = "<>StringReplace[StringReplace[ToString[SelectAmplitudes, InputForm], ";;" -> ",...,"]," " -> ""]"\n"]];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"g V"<>ToString[nLoops]<>"HC`i' = a`i';\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"#include "<>QGDiagrams<>";\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  If[TrimAmp===True,
    WriteString[outfile,"id   pol(ff?Boson(?a, p1?)) = 1;\n"];
    WriteString[outfile,".sort\n\n"];
  ];
  WriteString[outfile,"#call FeynmanRules;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"#call Polarizations;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"#call Propagators;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  If[AN$GaugeGroups=!={{U1Y, Abelian}},
    Do[
      Which[
        gauges[[ii,2]]==="Feynman",
        WriteString[outfile,"#call Propagators"<>gauges[[ii,1]]<>"FeynmanGauge;\n"];
        WriteString[outfile,".sort\n\n"],
        gauges[[ii,2]]==="RXi",
        WriteString[outfile,"#call Propagators"<>gauges[[ii,1]]<>"RXiGauge;\n"];
        WriteString[outfile,".sort\n\n"],
        gauges[[ii,2]]==="Unitary",
        WriteString[outfile,"#call Propagators"<>gauges[[ii,1]]<>"UnitaryGauge;\n"];
        WriteString[outfile,".sort\n\n"]
      ]
    ,{ii,1,Length[gauges]}];
  ];
  If[SelectCouplingsOrder=!="All",
    WriteString[outfile,"#call Couplings;\n"];
    WriteString[outfile,".sort\n\n"];
    WriteString[outfile,"bracket "<>couplingsStr<>";\n" ];
    WriteString[outfile,".sort\n\n"];
    WriteString[outfile,"g V"<>ToString[nLoops]<>"H`i' = tempV"<>ToString[nLoops]<>"H`i'["<>ToString[couplings[[1]] ]<>"^"<>ToString[couplingsPwr[[1]] ]<>"];\n"];
    WriteString[outfile,".sort\n\n"];
  ];
  WriteString[outfile,"#call Gamma5Subs;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"#call Conjugation;\n"];
  WriteString[outfile,".sort\n\n"];
  If[simpRules=!="None",
      WriteString[outfile,"id "<>StringReplace[ToString@InputForm[#[[1]] ],MathematicaToFormSubs]<>" = "<>StringReplace[ToString@InputForm[#[[2]] ],MathematicaToFormSubs]<>";\n"]& /@simpRules;
      noSpinorRules = Select[simpRules, Not@StringContainsQ[ StringReplace[ToString@InputForm[#[[1]]], MathematicaToFormSubs], "SpinorUC" | "SpinorVC" | "SpinorUbarC" | "SpinorVbarC" |
      "PolVC" | "SpinorU" | "SpinorV" | "SpinorUbar" | "SpinorVbar" | "PolV" ] & ];
      If[Length[noSpinorRules]>0,
      WriteString[outfile,"argument;\n"];
      WriteString[outfile,"id "<>StringReplace[ToString@InputForm[#[[1]] ],MathematicaToFormSubs]<>" = "<>StringReplace[ToString@InputForm[#[[2]] ],MathematicaToFormSubs]<>";\n"]&/@noSpinorRules;
      WriteString[outfile,"endargument;\n"];];
      WriteString[outfile,".sort\n\n"];
    ];
  WriteString[outfile,"#call ColourSubs;\n"];
  WriteString[outfile,".sort\n\n"];
  If[SimplifiedAmplitud===False,
  WriteString[outfile,"format mathematica;\n"];
  WriteString[outfile,".sort\n\n"];
  WriteString[outfile,"bracket SpinorUC, SpinorVC, SpinorUbarC, SpinorVbarC, PolVC, Den,GammaM;\n"];
  WriteString[outfile,"print+s V"<>ToString[nLoops]<>"HC`i';\n"];
  WriteString[outfile,".sort\n\n"];
  WriteString[outfile,"bracket SpinorU, SpinorV, SpinorUbar, SpinorVbar, PolV, Den, f, fabc,GammaM;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"#write<AmpC_"<>ToString[nLoops]<>".m> \"AN$AmplitudeC['i'] = ( %E )\",  V"<>ToString[nLoops]<>"HC`i';\n"];
  WriteString[outfile,".sort\n\n"];
  ];
  WriteString[outfile, "repeat id p1?.p2? = Dot(p1,p2);\n"];
  WriteString[outfile, ".sort;\n"];
  WriteString[outfile, "ab T,f,Den,GC1,...,GC"<>ToString[AN$NoCouplings]<>","<>stringMasses<>",Dot,NR,NA,cR,cA,I2R,i_,im;\n"];
  WriteString[outfile," .sort\n"];
  WriteString[outfile,"Collect hide;\n"];
  WriteString[outfile,"ArgToExtraSymbol hide;\n"];
  WriteString[outfile," .sort\n"];
  WriteString[outfile,"#call DiracTraces;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"id hide(y?) = y;\n"];
  WriteString[outfile,"FromPolynomial;\n"];
  WriteString[outfile, "repeat id Dot(p1?,p2?) = p1.p2;\n"];
  WriteString[outfile, ".sort\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"repeat id im = i_;\n"];
  WriteString[outfile,"id PolVC(p1?,p1?,0,Gluon1?) = 0;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  If[SimplifiedAmplitud===True,
    WriteString[outfile,"bracket SpinorU, SpinorV, SpinorUbar, SpinorVbar, PolV, Den,GammaM;\n"];
    WriteString[outfile,"print+s V"<>ToString[nLoops]<>"HC`i';\n"];
    WriteString[outfile,".sort\n\n"];
    WriteString[outfile,"format mathematica;\n"];
    WriteString[outfile,".sort\n\n"];
    WriteString[outfile,"bracket SpinorU, SpinorV, SpinorUbar, SpinorVbar, PolV, Den, f, fabc,GammaM;\n"];
    WriteString[outfile,".sort\n"];
    WriteString[outfile,"#write<AmpC_"<>ToString[nLoops]<>".m> \"AN$AmplitudeC['i'] = ( %E )\",  V"<>ToString[nLoops]<>"HC`i';\n"];
    WriteString[outfile,".sort\n\n"];
    ];
  WriteString[outfile,"\n"];
  If[DirectoryQ[SaveDir],DeleteDirectory[SaveDir,DeleteContents->True] ];
  CreateDirectory[SaveDir];
  WriteString[outfile,".store \n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"Save AmpC_"<>ToString[nLoops]<>"/V"<>ToString[nLoops]<>"HC`i'.sav V"<>ToString[nLoops]<>"HC`i';\n"];
  WriteString[outfile,If[Not[AN$GZip],"*",""] <> "#system gzip <AmpC_"<>ToString[nLoops]<>"/V"<>ToString[nLoops]<>"HC`i'.sav> AmpC_"<>ToString[nLoops]<>"/V"<>ToString[nLoops]<>"HC`i'.sav.gz\n"];
  WriteString[outfile,If[Not[AN$GZip],"*",""] <>  "#system rm AmpC_"<>ToString[nLoops]<>"/V"<>ToString[nLoops]<>"HC`i'.sav\n"];
  WriteString[outfile,"Delete Storage;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"Drop;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"#enddo\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,".end\n"];
Close[outfile];
]  




(********************************************)
(*     Write Amplitude Square FORM file     *)
(********************************************)


WriteMasterSqFO[model_String,AmpPath_,AmpCPath_,nDiagrams_,nDiagramsC_,nDiagrams1_,nDiagrams2_,nDiagramsC1_,nDiagramsC2_,nLoops_,nLoopsC_,Dim_,overall_,CasimirValues_,simpRules1_,couplingexpand_]:=Block[{nD1=nDiagrams1,nD2=nDiagrams2,nDC1=nDiagramsC1,nDC2=nDiagramsC2,outh=AmpPath,outfile,SaveDir,overallfactors,wsp,lineLength,comStr,stringMasses},

outfile=outh<>"/AmpSq_"<>ToString[nLoops]<>ToString[nLoopsC]<>".frm";
SaveDir = AmpPath<>"/AmpSq_"<>ToString[nLoops]<>ToString[nLoopsC];
simpRules = simpRules1/.{S->SS,T->TT,U->UU};

overallfactors = overall;
overallfactors = ToString@InputForm[overall];
overallfactors = StringReplace[overallfactors, MathematicaToFormSubs];

stringMasses = ToString[DeleteDuplicates[AN$Masses[[;;,2]] ] ];
stringMasses = StringDelete[ stringMasses, {"{", "}"}];

wsp="                                                                                                                             ";     
lineLength=50;
comStr="*************************************************************************************";
OpenWrite[outfile];
  WriteString[outfile,StringTake[comStr,lineLength]<>"\n" ];
  WriteString[outfile,StringTake["*    File automatically generated by ANATAR    "<>wsp,lineLength]<>"\n" ];
  WriteString[outfile,StringTake[comStr,lineLength]<>"\n\n\n" ];
  WriteString[outfile,"*****      This is the master Amplitude Square FORM file for      *****\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"***** AmplitudeSq for the process "<>ToString[InputForm[AN$InitialState]]<>" > "<>ToString[InputForm[AN$FinalState]]<>" ******\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"#-\n"];
  WriteString[outfile,"off statistics,finalstats,allwarnings;\n"];
  WriteString[outfile,"nwrite statistics;\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"#define RANK \"14\"\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Core/color.h  #Declarations\n"];
  WriteString[outfile,"#include "<>AmpPath<>"/Definitions.h\n"];
  WriteString[outfile,"#include "<>AmpPath<>"/Kinematics.frm\n"];
  If[Dim===4,
    WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Core/DiracTraces4d.frm\n"],
    WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Core/DiracTraces.frm\n"]
    ];
  WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Core/color.h  #color \n"];
  WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Core/color.h  #SORT\n"];
  WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Core/color.h  #adjoint\n"];
  WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Models/"<>model<>"/Vertices.frm\n"];
  WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Models/"<>model<>"/Polarizations.frm\n"];
  WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Models/"<>model<>"/Propagators.frm\n"];
  WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Models/"<>model<>"/Couplings.frm\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"\n"];
  If[ContainsExactly[Head/@nDiagrams,{Span}],
     WriteString[outfile,"#do i = "<>StringDelete[StringReplace[StringReplace[ToString[nDiagrams, InputForm], ";;" -> ","]," " -> ""],{"{", "}"}]"\n"],
  WriteString[outfile,"#do i = "<>StringReplace[StringReplace[ToString[nDiagrams, InputForm], ";;" -> ",...,"]," " -> ""]"\n"]];
  If[ContainsExactly[Head/@nDiagramsC,{Span}],
     WriteString[outfile,"#do j = "<>StringDelete[StringReplace[StringReplace[ToString[nDiagramsC, InputForm], ";;" -> ","]," " -> ""],{"{", "}"}]"\n"],
  WriteString[outfile,"#do j = "<>StringReplace[StringReplace[ToString[nDiagramsC, InputForm], ";;" -> ",...,"]," " -> ""]"\n"]];
  WriteString[outfile,If[Not[AN$GZip],"*",""] <> "#system gunzip <"<>AmpPath<>"/Amp_"<>ToString[nLoops]<>"/V"<>ToString[nLoops]<>"H`i'.sav.gz> Amp_"<>ToString[nLoops]<>"/V"<>ToString[nLoops]<>"H`i'.sav\n"];
  WriteString[outfile,If[Not[AN$GZip],"*",""] <> "#system gunzip <"<>AmpCPath<>"/AmpC_"<>ToString[nLoopsC]<>"/V"<>ToString[nLoopsC]<>"HC`j'.sav.gz> AmpC_"<>ToString[nLoopsC]<>"/V"<>ToString[nLoopsC]<>"HC`j'.sav\n"];
  WriteString[outfile,"load "<>AmpPath<>"/Amp_"<>ToString[nLoops]<>"/V"<>ToString[nLoops]<>"H`i'.sav;\n"];
  WriteString[outfile,"load "<>AmpCPath<>"/AmpC_"<>ToString[nLoopsC]<>"/V"<>ToString[nLoopsC]<>"HC`j'.sav;\n"];
  WriteString[outfile,If[Not[AN$GZip],"*",""] <>  "#system rm Amp_"<>ToString[nLoops]<>"/V"<>ToString[nLoops]<>"H`i'.sav \n"];
  WriteString[outfile,If[Not[AN$GZip],"*",""] <>  "#system rm AmpC_"<>ToString[nLoopsC]<>"/V"<>ToString[nLoopsC]<>"HC`j'.sav \n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  If[overall=!="None",
       WriteString[outfile,"g AmpSq`i'C`j' = "<>overallfactors<>"*V"<>ToString[nLoops]<>"H`i'* V"<>ToString[nLoopsC]<>"HC`j';\n"],
       WriteString[outfile,"g AmpSq`i'C`j' = V"<>ToString[nLoops]<>"H`i'* V"<>ToString[nLoopsC]<>"HC`j';\n"]];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"#call Propagators;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"#call PolarizationSum;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile, "repeat id p1?.p2? = Dot(p1,p2);\n"];
  WriteString[outfile, ".sort;\n"];
  WriteString[outfile, "ab T,f,Den,GC1,...,GC"<>ToString[AN$NoCouplings]<>","<>stringMasses<>",Dot,NR,NA,cR,cA,I2R,i_,im;\n"];
  WriteString[outfile," .sort\n"];
  WriteString[outfile,"Collect hide;\n"];
  WriteString[outfile,"ArgToExtraSymbol hide;\n"];
  WriteString[outfile," .sort\n"];
  WriteString[outfile,"#call DiracTraces;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"id hide(y?) = y;\n"];
  WriteString[outfile,"FromPolynomial;\n"];
  WriteString[outfile, "repeat id Dot(p1?,p2?) = p1.p2;\n"];
  WriteString[outfile, ".sort\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"#call Kinematics;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  If[Dim=!=4,
  WriteString[outfile,"b Levieps;\n"];
  WriteString[outfile, ".sort\n"];
  WriteString[outfile,"Collect hide;\n"];
  WriteString[outfile,"ArgToExtraSymbol hide;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"#call LeviepsSimp;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"id hide(y?) = y;\n"];
  WriteString[outfile,"FromPolynomial;\n"];
  WriteString[outfile, ".sort\n"];
  WriteString[outfile,"\n"];];
  WriteString[outfile,"Dimension NA;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile, "bracket T,f;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"Collect hide;\n"];
  WriteString[outfile,"ArgToExtraSymbol hide;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"#call color;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"#call SORT(color-1);\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"#call adjoint;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"id hide(y?) = y;\n"];
  WriteString[outfile,"FromPolynomial;\n"];
  WriteString[outfile, "repeat id Dot(p1?,p2?) = p1.p2;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  If[couplingexpand===True,
  WriteString[outfile,"#call Couplings;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"] ];
  If[simpRules=!="None",
      WriteString[outfile,"repeat id "<>StringReplace[ToString@InputForm[#[[1]] ],MathematicaToFormSubs]<>" = "<>StringReplace[ToString@InputForm[#[[2]] ],MathematicaToFormSubs]<>";\n"]& /@simpRules;
      noSpinorRules = Select[simpRules, Not@StringContainsQ[ StringReplace[ToString@InputForm[#[[1]]], MathematicaToFormSubs], "SpinorUC" | "SpinorVC" | "SpinorUbarC" | "SpinorVbarC" |
      "PolVC" | "SpinorU" | "SpinorV" | "SpinorUbar" | "SpinorVbar" | "PolV" | "Den" |"Flag" |"Levieps" ] & ];
      If[Length[noSpinorRules]>0,
      WriteString[outfile,"argument;\n"];
      WriteString[outfile,"id "<>StringReplace[ToString@InputForm[#[[1]] ],MathematicaToFormSubs]<>" = "<>StringReplace[ToString@InputForm[#[[2]] ],MathematicaToFormSubs]<>";\n"]&/@noSpinorRules;
      WriteString[outfile,"endargument;\n"];];
      WriteString[outfile,".sort\n\n"];
    ];
  WriteString[outfile,"repeat id im = i_;\n"];
  WriteString[outfile,"id nn.nn = 0;\n"];
  WriteString[outfile,"id I2R = TF;\n"];
  WriteString[outfile,"id cA = CA;\n"];
  WriteString[outfile,"id cR = CF;\n"];
  WriteString[outfile,"id NA = CF*Nc/TF;\n"];
  WriteString[outfile,"id NR = Nc;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"id i_ = im;\n"];
  If[CasimirValues === True,
  WriteString[outfile,"id TF^n?int_ = (1/2)^n;\n"];
  WriteString[outfile,"id CA^n?int_ = (3)^n;\n"];
  WriteString[outfile,"id Nc^n?int_ = (3)^n;\n"];
  WriteString[outfile,"id CF^n?int_ = (4/3)^n;\n"];];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"format mathematica;\n"];
  WriteString[outfile,".sort\n\n"];
  WriteString[outfile,"#write<AmpSq_"<>ToString[nLoops]<>ToString[nLoopsC]<>".m> \"AN$AmpSq[`i',`j'] = ( %E )\",  AmpSq`i'C`j';\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,"print+s AmpSq`i'C`j';\n"];
  WriteString[outfile,"bracket Den,CA,CF,TF,Nc;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  If[DirectoryQ[SaveDir],DeleteDirectory[SaveDir,DeleteContents->True] ];
  CreateDirectory[SaveDir];
  WriteString[outfile,".store \n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"Save AmpSq_"<>ToString[nLoops]<>ToString[nLoopsC]<>"/AmpSq`i'C`j'.sav AmpSq`i'C`j';\n"];
  WriteString[outfile,"Delete Storage;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"Drop;\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"#enddo\n"];
  WriteString[outfile,"#enddo\n"];
  WriteString[outfile,".sort\n"];
  WriteString[outfile,"\n"];
  WriteString[outfile,".end\n"];
Close[outfile];
]  



(********************************************)
(*     Write Kinematic substitutions file   *)
(********************************************)


WriteKinematics[out0_,KinematicInvariants_,ListKinematics_]:=Block[{outh=out0,stringKine,variables,wsp,lineLength,comStr},

   variables = Select[ListKinematics, !MatchQ[#, _Symbol -> _Plus | _Symbol] &];
   variables = Variables[variables[[;;,2]]];
   variables = DeleteCases[variables,Dot[p1_,p2_] ];
   variables = Complement[variables, AN$Masses[[;; , 2]] ];

   stringKine = ListKinematics/.{(x_->y_):> ToString@InputForm@x <>" = "<> ToString@InputForm@y};
   stringKine = StringReplace[stringKine, {" . " -> "."}];

   outfile=outh<>"/Kinematics.frm";

   wsp="                                                                                                                             ";     
   lineLength=50;
   comStr="*************************************************************************************";
   OpenWrite[outfile];
     WriteString[outfile,StringTake[comStr,lineLength]<>"\n" ];
     WriteString[outfile,StringTake["*    File automatically generated by ANATAR    "<>wsp,lineLength]<>"\n" ];
     WriteString[outfile,StringTake[comStr,lineLength]<>"\n\n\n" ];
     WriteString[outfile,"#procedure Kinematics\n"];
     WriteString[outfile,".sort\n\n"];
     If[Length[variables]>0, WriteString[outfile,"s "<>(StringDelete[#,{"{","}"}] &)@ToString[variables]<>";\n\n"] ];
     WriteString[outfile,"repeat;\n"];
     (WriteString[outfile,"id   "<>#<>";\n"]&)/@stringKine;
     WriteString[outfile,"endrepeat;\n\n"];
     WriteString[outfile,"argument;\n"];
     (WriteString[outfile,"repeat id   "<>#<>";\n"]&)/@stringKine;
     WriteString[outfile,"endargument;\n\n"];
     WriteString[outfile,".sort\n\n"];
     WriteString[outfile,"#endprocedure Kinematics\n"];
   Close[outfile];

]




WriteProjectorsRoutine[AmpPath_,fields_List,nDiagrams_,nDiagrams1_,nDiagrams2_,nLoops_,Dim_,Projectors_,nProjectors_,simpRules_,CasimirValues_]:=Block[{nD=nDiagrams2-nDiagrams1+1,outh=AmpPath,outfile,structure,nProj,listproj,stringMasses},

   outfile=outh<>"/ProjectAmp_"<>ToString[nLoops]<>".frm";
   structure=ToString[fields];
   structure=StringReplace[structure,{"["->"(","]"->")","{"->"","}"->""}];

   nProj=ToString[nProjectors];

      listproj =  Projectors;
      listproj = listproj/.{T[x___]:>TTemp[x]}/.{S->SS,T->TT,U->UU}/.{TTemp[x___]:>T[x]} ;

      If[ nLoops === 0, listproj = listproj/.{D->4} ];
      listproj = ToString/@InputForm/@(listproj//.{d->D});
      listproj = StringReplace[listproj, MathematicaToFormSubs];
      listproj = Table[{"Projector("<>ToString[jj]<>","<>structure<>")" , ToString@listproj[[jj]]}, {jj,1,Length[listproj]}];
      nProj = ToString[nProj];
   
    stringMasses = ToString[DeleteDuplicates[AN$Masses[[;;,2]] ] ];
    stringMasses = StringDelete[ stringMasses, {"{", "}"}];

   wsp="                                                                                                                             ";     
   lineLength=50;
   comStr="*************************************************************************************";
   OpenWrite[outfile];
    WriteString[outfile,StringTake[comStr,lineLength]<>"\n" ];
    WriteString[outfile,StringTake["*    File automatically generated by ANATAR    "<>wsp,lineLength]<>"\n" ];
    WriteString[outfile,StringTake[comStr,lineLength]<>"\n\n\n" ];
    WriteString[outfile,"***** Projected amplitude for the process "<>ToString[InputForm[AN$InitialState] ]<>" > "<>ToString[InputForm[AN$FinalState] ]<>" ******\n"];
    WriteString[outfile,"\n"];
    WriteString[outfile,"#-\n"];
    WriteString[outfile,"off statistics,finalstats,allwarnings;\n"];
    WriteString[outfile,"nwrite statistics;\n"];
    WriteString[outfile,"\n"];
    WriteString[outfile,"#define RANK \"14\"\n"];
    WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Core/color.h  #Declarations\n"];
    WriteString[outfile,"#include "<>AmpPath<>"/Definitions.h\n"];
    WriteString[outfile,"#include "<>AmpPath<>"/Kinematics.frm\n"];
    If[Dim===4,
    WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Core/DiracTraces4d.frm\n"],
    WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Core/DiracTraces.frm\n"]
    ];
    WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Core/color.h  #color \n"];
    WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Core/color.h  #SORT\n"];
    WriteString[outfile,"#include "<>Global`$AnatarPath<>"/Core/color.h  #adjoint\n"];
    WriteString[outfile,"#include "<>AmpPath<>"/projectors.frm\n\n"];
    WriteString[outfile,"Cf Projector;\n\n"];
    If[ContainsExactly[Head/@nDiagrams,{Span}],
     WriteString[outfile,"#do i = "<>StringDelete[StringReplace[StringReplace[ToString[nDiagrams, InputForm], ";;" -> ","]," " -> ""],{"{", "}"}]"\n"],
  WriteString[outfile,"#do i = "<>StringReplace[StringReplace[ToString[nDiagrams, InputForm], ";;" -> ",...,"]," " -> ""]"\n"]];
    WriteString[outfile,If[Not[AN$GZip],"*",""] <> "#system gunzip <"<>AmpPath<>"/Amp_"<>ToString[nLoops]<>"/V"<>ToString[nLoops]<>"H`i'.sav.gz> Amp_"<>ToString[nLoops]<>"/V"<>ToString[nLoops]<>"H`i'.sav\n"];
    WriteString[outfile,"load "<>AmpPath<>"/Amp_"<>ToString[nLoops]<>"/V"<>ToString[nLoops]<>"H'i'.sav;\n"];
    WriteString[outfile,If[Not[AN$GZip],"*",""] <>  "#system rm Amp_"<>ToString[nLoops]<>"/V"<>ToString[nLoops]<>"H`i'.sav \n"];
    WriteString[outfile,".sort\n\n"];
    WriteString[outfile,"bracket SpinorU, SpinorV, SpinorUbar, SpinorVbar, PolV, Den, f, fabc;\n"];
    WriteString[outfile,".sort\n\n"];
    WriteString[outfile,"#do jj = 1,"<>nProj<>"\n\n"];
    WriteString[outfile,"g Projector'jj'Amp'i' = Projector('jj',"<>structure<>")*V"<>ToString[nLoops]<>"H'i';\n"];
    WriteString[outfile,".sort\n\n"];
    WriteString[outfile,"#call StripPolSpinor;\n"];
    WriteString[outfile,".sort\n\n"];
    If[simpRules=!="None",
      WriteString[outfile,"id "<>ToString[#[[1]] ]<>" = "<>ToString[#[[2]] ]<>";\n"]& /@simpRules;
      WriteString[outfile,".sort\n\n"];
    ];
    If[SetOffShell===False,
        WriteString[outfile,"#call Kinematics;\n"]
      ];
    WriteString[outfile,".sort\n\n"];
    WriteString[outfile,"#call Projectors;\n"];
    WriteString[outfile,".sort\n\n"];
    WriteString[outfile,"#call PolarizationSum;\n"];
    WriteString[outfile,".sort\n"];
    WriteString[outfile,"\n"];
    WriteString[outfile,"#call Gamma5Subs;\n"];
    WriteString[outfile,".sort\n"];
    WriteString[outfile,"\n"];
  WriteString[outfile, "repeat id p1?.p2? = Dot(p1,p2);\n"];
  WriteString[outfile, ".sort;\n"];
  WriteString[outfile, "ab T,f,Den,GC1,...,GC"<>ToString[AN$NoCouplings]<>","<>stringMasses<>",Dot,NR,NA,cR,cA,I2R,i_,im;\n"];
    WriteString[outfile,".sort\n"];
    WriteString[outfile,"Collect hide;\n"];
    WriteString[outfile,"ArgToExtraSymbol hide;\n"];
    WriteString[outfile,".sort\n"];
    WriteString[outfile,"#call DiracTraces;\n"];
    WriteString[outfile,".sort\n"];
    WriteString[outfile,"id hide(y?) = y;\n"];
    WriteString[outfile,"FromPolynomial;\n"];
  WriteString[outfile, "repeat id Dot(p1?,p2?) = p1.p2;\n"];
    WriteString[outfile,".sort\n"];
    WriteString[outfile,"\n"];
    If[SetOffShell===False,
        WriteString[outfile,"#call Kinematics;\n"]
      ];
    WriteString[outfile,".sort\n"];
    WriteString[outfile,"\n"];
    WriteString[outfile,"#call ColourSubs;\n"];
    WriteString[outfile,".sort\n"];
    WriteString[outfile,"\n"];
    If[Dim=!=4,
    WriteString[outfile,"b Levieps;\n"];
    WriteString[outfile, ".sort\n"];
    WriteString[outfile,"Collect hide;\n"];
    WriteString[outfile,"ArgToExtraSymbol hide;\n"];
    WriteString[outfile,".sort\n"];
    WriteString[outfile,"#call LeviepsSimp;\n"];
    WriteString[outfile,".sort\n"];
    WriteString[outfile,"id hide(y?) = y;\n"];
    WriteString[outfile,"FromPolynomial;\n"];
    WriteString[outfile, ".sort\n"];
    WriteString[outfile,"\n"];];
    WriteString[outfile,"Dimension NA;\n"];
    WriteString[outfile,".sort\n"];
    WriteString[outfile,"\n"];
    WriteString[outfile, "bracket T,f;\n"];
    WriteString[outfile,".sort\n"];
    WriteString[outfile,"Collect hide;\n"];
    WriteString[outfile,"ArgToExtraSymbol hide;\n"];
    WriteString[outfile,".sort\n"];
    WriteString[outfile,"#call color;\n"];
    WriteString[outfile,".sort\n"];
    WriteString[outfile,"#call SORT(color-1);\n"];
    WriteString[outfile,".sort\n"];
    WriteString[outfile,"#call adjoint;\n"];
    WriteString[outfile,".sort\n\n"];
    WriteString[outfile,"id hide(y?) = y;\n"];
    WriteString[outfile,"FromPolynomial;\n"];
    WriteString[outfile,".sort\n"];
    WriteString[outfile,"repeat id im = i_;\n"];
    WriteString[outfile,"id nn.nn = 0;\n"];
    WriteString[outfile,"id I2R = TF;\n"];
    WriteString[outfile,"id cA = CA;\n"];
    WriteString[outfile,"id cR = CF;\n"];
    WriteString[outfile,"id NA = CF*Nc/TF;\n"];
    WriteString[outfile,"id NR = Nc;\n"];
    WriteString[outfile," .sort\n\n"];
    If[CasimirValues === True,
      WriteString[outfile,"id TF^n?int_ = (1/2)^n;\n"];
      WriteString[outfile,"id CA^n?int_ = (3)^n;\n"];
      WriteString[outfile,"id Nc^n?int_ = (3)^n;\n"];
      WriteString[outfile,"id CF^n?int_ = (4/3)^n;\n"];
      WriteString[outfile," .sort\n\n"];];
    WriteString[outfile,"print+s Projector'jj'Amp'i';\n\n"];
    WriteString[outfile,"format mathematica;\n"];
    WriteString[outfile,".sort\n\n"];
    WriteString[outfile,"bracket SpinorU, SpinorV, SpinorUbar, SpinorVbar, PolV, Den, f, fabc;\n"];
    WriteString[outfile,".sort\n"];
    WriteString[outfile,"#write<Amp_Proj_"<>ToString[nLoops]<>".m> \"AN$ProjAmplitude['i','jj'] = ( %E )\",  Projector'jj'Amp'i';\n"];
    WriteString[outfile,".sort\n\n"];
    WriteString[outfile,"#enddo\n"];
    WriteString[outfile,".sort\n\n"];
    WriteString[outfile,"#enddo\n"];
    WriteString[outfile,".sort\n\n"];
    WriteString[outfile,".end"];

  Close[outfile];


    (* Write file with projectors *)

   outfile=outh<>"/projectors.frm";
   wsp="                                                                                                                             ";     
   lineLength=50;
   comStr="*************************************************************************************";
   OpenWrite[outfile];
    WriteString[outfile,StringTake[comStr,lineLength]<>"\n" ];
    WriteString[outfile,StringTake["*    File automatically generated by ANATAR    "<>wsp,lineLength]<>"\n" ];
    WriteString[outfile,StringTake[comStr,lineLength]<>"\n\n\n" ];
    WriteString[outfile,"*****   Definition of the projectors   *****\n\n"];
    WriteString[outfile,"#procedure Projectors\n"];
    WriteString[outfile,".sort\n\n"];
    (WriteString[outfile,"id   "<>#[[1]]<>" = "<>#[[2]]<>";\n"]&)/@listproj;
    WriteString[outfile,"\n"];
    WriteString[outfile,"#endprocedure Projectors\n\n"];
  Close[outfile];

  ProjectorsList = ProjectorsList/.{SS->S,TT->T,UU->U};
]
